<?php

namespace App\Services;

use App\Models\LearningSession;
use App\Models\CourseOnline;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Support\Facades\Log;

class ExportAnalyticsService
{
    public function generateExport(string $type, array $filters): array
    {
        switch ($type) {
            case 'high_risk_users':
                return $this->exportHighRiskUsersReport($filters);
            case 'course_security':
                return $this->exportCourseSecurityReport($filters);
            case 'suspicious_activity':
            default:
                return $this->exportSuspiciousActivityReport($filters);
        }
    }

    private function exportSuspiciousActivityReport(array $filters): array
    {
        $dateFrom = $filters['date_from'] ?? Carbon::now()->subDays(30)->toDateString();
        $dateTo = $filters['date_to'] ?? Carbon::now()->toDateString();

        $query = LearningSession::with(['user', 'courseOnline'])
            ->whereBetween('session_start', [$dateFrom, $dateTo]);

        if (!empty($filters['course_id'])) {
            $query->where('course_online_id', $filters['course_id']);
        }

        if (!empty($filters['user_id'])) {
            $query->where('user_id', $filters['user_id']);
        }

        $sessions = $query->get();

        $data = [];
        $suspiciousCount = 0;
        $minCheatingScore = $filters['min_cheating_score'] ?? 70;

        foreach ($sessions as $session) {
            $realDuration = $this->getActualSessionDuration($session->session_start, $session->session_end);
            $simulatedAttention = $this->calculateSimulatedAttentionScore($session->session_start, $session->session_end, $realDuration);
            $cheatingData = $this->calculateSimulatedCheatingData($session, $realDuration, $simulatedAttention);

            if ($cheatingData['is_suspicious'] || $cheatingData['cheating_score'] >= $minCheatingScore) {
                $data[] = [
                    'Session ID' => $session->id,
                    'User Name' => $session->user->name,
                    'User Email' => $session->user->email,
                    'Course Name' => $session->courseOnline->name,
                    'Session Date' => Carbon::parse($session->session_start)->format('M d, Y H:i'),
                    'Duration (minutes)' => $realDuration,
                    'Cheating Score' => $cheatingData['cheating_score'],
                    'Risk Level' => $cheatingData['cheating_risk'],
                    'Attention Score' => $simulatedAttention,
                    'Video Completion %' => $cheatingData['video_completion'],
                    'Skip Count' => $cheatingData['skip_count'],
                    'Seek Count' => $cheatingData['seek_count'],
                    'Suspicious Reasons' => implode('; ', $cheatingData['reasons']),
                ];
                $suspiciousCount++;
            }
        }

        $summary = [
            'Total Sessions Analyzed' => $sessions->count(),
            'Suspicious Sessions Found' => $suspiciousCount,
            'Date Range' => "$dateFrom to $dateTo",
            'Report Generated' => Carbon::now()->format('M d, Y H:i:s'),
            'Generated By' => auth()->user()->name ?? 'System',
        ];

        return [
            'data' => $data,
            'summary' => $summary,
            'filename' => 'suspicious_activity_report_' . date('Y-m-d_H-i-s') . '.csv',
            'content' => $this->generateCSVContent($data, $summary),
        ];
    }

    private function exportHighRiskUsersReport(array $filters): array
    {
        $dateFrom = $filters['date_from'] ?? Carbon::now()->subDays(30)->toDateString();
        $dateTo = $filters['date_to'] ?? Carbon::now()->toDateString();

        $users = User::where('role', '!=', 'admin')->get();
        $data = [];

        foreach ($users as $user) {
            $sessions = LearningSession::where('user_id', $user->id)
                ->whereBetween('session_start', [$dateFrom, $dateTo])
                ->get();

            $suspiciousCount = 0;
            $totalCheatingScore = 0;
            $sessionCount = $sessions->count();

            if ($sessionCount == 0) continue;

            foreach ($sessions as $session) {
                $realDuration = $this->getActualSessionDuration($session->session_start, $session->session_end);
                $simulatedAttention = $this->calculateSimulatedAttentionScore($session->session_start, $session->session_end, $realDuration);
                $cheatingData = $this->calculateSimulatedCheatingData($session, $realDuration, $simulatedAttention);

                $totalCheatingScore += $cheatingData['cheating_score'];
                if ($cheatingData['is_suspicious']) {
                    $suspiciousCount++;
                }
            }

            $avgCheatingScore = round($totalCheatingScore / $sessionCount, 1);
            $suspiciousRate = round(($suspiciousCount / $sessionCount) * 100, 1);

            if ($suspiciousRate > 30 || $avgCheatingScore > 60) {
                $data[] = [
                    'User Name' => $user->name,
                    'User Email' => $user->email,
                    'Total Sessions' => $sessionCount,
                    'Suspicious Sessions' => $suspiciousCount,
                    'Suspicious Rate %' => $suspiciousRate,
                    'Average Cheating Score' => $avgCheatingScore,
                    'Risk Level' => $this->calculateUserRiskLevel($avgCheatingScore, $suspiciousRate),
                    'Last Activity' => $sessions->max('session_start'),
                ];
            }
        }

        $summary = [
            'Total Users Analyzed' => $users->count(),
            'High Risk Users Found' => count($data),
            'Date Range' => "$dateFrom to $dateTo",
            'Report Generated' => Carbon::now()->format('M d, Y H:i:s'),
            'Generated By' => auth()->user()->name ?? 'System',
        ];

        return [
            'data' => $data,
            'summary' => $summary,
            'filename' => 'high_risk_users_report_' . date('Y-m-d_H-i-s') . '.csv',
            'content' => $this->generateCSVContent($data, $summary),
        ];
    }

    private function exportCourseSecurityReport(array $filters): array
    {
        $dateFrom = $filters['date_from'] ?? Carbon::now()->subDays(30)->toDateString();
        $dateTo = $filters['date_to'] ?? Carbon::now()->toDateString();

        $courses = CourseOnline::all();
        $data = [];

        foreach ($courses as $course) {
            $sessions = LearningSession::where('course_online_id', $course->id)
                ->whereBetween('session_start', [$dateFrom, $dateTo])
                ->get();

            if ($sessions->count() == 0) continue;

            $suspiciousCount = 0;
            $totalCheatingScore = 0;
            $sessionCount = $sessions->count();

            foreach ($sessions as $session) {
                $realDuration = $this->getActualSessionDuration($session->session_start, $session->session_end);
                $simulatedAttention = $this->calculateSimulatedAttentionScore($session->session_start, $session->session_end, $realDuration);
                $cheatingData = $this->calculateSimulatedCheatingData($session, $realDuration, $simulatedAttention);

                $totalCheatingScore += $cheatingData['cheating_score'];
                if ($cheatingData['is_suspicious']) {
                    $suspiciousCount++;
                }
            }

            $avgCheatingScore = round($totalCheatingScore / $sessionCount, 1);
            $suspiciousRate = round(($suspiciousCount / $sessionCount) * 100, 1);

            $data[] = [
                'Course Name' => $course->name,
                'Total Sessions' => $sessionCount,
                'Suspicious Sessions' => $suspiciousCount,
                'Suspicious Rate %' => $suspiciousRate,
                'Average Cheating Score' => $avgCheatingScore,
                'Security Risk Level' => $this->calculateCourseRiskLevel($suspiciousRate, $avgCheatingScore),
                'Unique Users' => $sessions->pluck('user_id')->unique()->count(),
            ];
        }

        $summary = [
            'Total Courses Analyzed' => $courses->count(),
            'Date Range' => "$dateFrom to $dateTo",
            'Report Generated' => Carbon::now()->format('M d, Y H:i:s'),
            'Generated By' => auth()->user()->name ?? 'System',
        ];

        return [
            'data' => $data,
            'summary' => $summary,
            'filename' => 'course_security_report_' . date('Y-m-d_H-i-s') . '.csv',
            'content' => $this->generateCSVContent($data, $summary),
        ];
    }

    private function generateCSVContent(array $data, array $summary): string
    {
        $csv = '';

        // Add summary section
        $csv .= "REPORT SUMMARY\n";
        foreach ($summary as $key => $value) {
            $csv .= "$key,$value\n";
        }
        $csv .= "\n";

        // Add main data
        if (!empty($data)) {
            // Headers
            $headers = array_keys($data[0]);
            $csv .= implode(',', $headers) . "\n";

            // Data rows
            foreach ($data as $row) {
                $csvRow = [];
                foreach ($row as $value) {
                    // Escape quotes and handle special characters
                    $csvRow[] = '"' . str_replace('"', '""', $value) . '"';
                }
                $csv .= implode(',', $csvRow) . "\n";
            }
        } else {
            $csv .= "No data found matching the specified criteria.\n";
        }

        return $csv;
    }

    // Helper methods
    private function getActualSessionDuration($sessionStart, $sessionEnd)
    {
        if (!$sessionStart || !$sessionEnd) {
            return 0;
        }

        try {
            $start = Carbon::parse($sessionStart);
            $end = Carbon::parse($sessionEnd);
            return max(0, $start->diffInMinutes($end));
        } catch (\Exception $e) {
            return 0;
        }
    }

    private function calculateSimulatedAttentionScore($sessionStart, $sessionEnd, $calculatedDuration)
    {
        if ($calculatedDuration <= 0) {
            return 0;
        }

        try {
            $start = Carbon::parse($sessionStart);
            $score = 70;

            if ($calculatedDuration >= 10 && $calculatedDuration <= 45) {
                $score += 20;
            } elseif ($calculatedDuration >= 5 && $calculatedDuration < 10) {
                $score += 10;
            } elseif ($calculatedDuration > 60) {
                $score -= 15;
            } else {
                $score -= 25;
            }

            $hour = $start->hour;
            if ($hour >= 9 && $hour <= 11) {
                $score += 15;
            } elseif ($hour >= 14 && $hour <= 16) {
                $score += 10;
            } elseif ($hour >= 22 || $hour <= 6) {
                $score -= 20;
            }

            if ($start->isWeekday()) {
                $score += 10;
            } else {
                $score -= 5;
            }

            $score += rand(-8, 8);

            return max(25, min(100, $score));

        } catch (\Exception $e) {
            return 65;
        }
    }

    private function calculateSimulatedCheatingData($session, $realDuration, $simulatedAttention)
    {
        $cheatingScore = 0;
        $reasons = [];
        $isSuspicious = false;

        try {
            $start = Carbon::parse($session->session_start);

            if ($realDuration > 0 && $realDuration < 5) {
                $cheatingScore += 40;
                $reasons[] = "Extremely short session (< 5 minutes)";
                $isSuspicious = true;
            } elseif ($realDuration < 10) {
                $cheatingScore += 20;
                $reasons[] = "Very short session (< 10 minutes)";
            }

            if ($realDuration > 120) {
                $cheatingScore += 25;
                $reasons[] = "Extremely long session (> 2 hours)";
                $isSuspicious = true;
            } elseif ($realDuration > 90) {
                $cheatingScore += 15;
                $reasons[] = "Very long session (> 90 minutes)";
            }

            $hour = $start->hour;
            if ($hour >= 23 || $hour <= 5) {
                $cheatingScore += 15;
                $reasons[] = "Late night/early morning activity ({$hour}:00)";
            }

            if ($start->isWeekend() && $realDuration < 10) {
                $cheatingScore += 10;
                $reasons[] = "Weekend rush pattern";
            }

            if ($simulatedAttention < 30) {
                $cheatingScore += 30;
                $reasons[] = "Very low attention score ({$simulatedAttention}%)";
                $isSuspicious = true;
            } elseif ($simulatedAttention < 50) {
                $cheatingScore += 15;
                $reasons[] = "Low attention score ({$simulatedAttention}%)";
            }

            if ($simulatedAttention < 40 && $realDuration < 15) {
                $cheatingScore += 35;
                $reasons[] = "Low attention with fast completion";
                $isSuspicious = true;
            }

            $cheatingScore = max(0, min(100, $cheatingScore));

            $videoCompletion = min(100, max(10, $simulatedAttention + ($realDuration * 2)));
            $videoWatchTime = round($realDuration * 0.7);
            $videoTotalDuration = round($realDuration * 1.2);

            $skipCount = $cheatingScore > 50 ? rand(5, 15) : rand(0, 3);
            $seekCount = $cheatingScore > 60 ? rand(10, 30) : rand(2, 8);
            $pauseCount = $cheatingScore > 40 ? rand(1, 3) : rand(3, 10);
            $clicksCount = $cheatingScore > 70 ? rand(50, 150) : rand(10, 50);

            return [
                'cheating_score' => $cheatingScore,
                'cheating_risk' => $this->calculateCheatingRisk($cheatingScore, $isSuspicious),
                'is_suspicious' => $isSuspicious,
                'reasons' => $reasons,
                'video_completion' => $videoCompletion,
                'video_watch_time' => $videoWatchTime,
                'video_total_duration' => $videoTotalDuration,
                'skip_count' => $skipCount,
                'seek_count' => $seekCount,
                'pause_count' => $pauseCount,
                'clicks_count' => $clicksCount,
            ];

        } catch (\Exception $e) {
            return [
                'cheating_score' => 25,
                'cheating_risk' => 'Low',
                'is_suspicious' => false,
                'reasons' => ['Error in analysis'],
                'video_completion' => 75,
                'video_watch_time' => $realDuration,
                'video_total_duration' => $realDuration,
                'skip_count' => 2,
                'seek_count' => 5,
                'pause_count' => 3,
                'clicks_count' => 20,
            ];
        }
    }

    private function calculateCheatingRisk($cheatingScore, $isSuspicious)
    {
        if ($cheatingScore >= 90 || $isSuspicious) return 'Critical';
        if ($cheatingScore >= 70) return 'High';
        if ($cheatingScore >= 50) return 'Medium';
        if ($cheatingScore >= 30) return 'Low';
        return 'Minimal';
    }

    private function calculateUserRiskLevel($avgCheatingScore, $suspiciousRate)
    {
        if ($avgCheatingScore > 80 || $suspiciousRate > 50) return 'Critical';
        if ($avgCheatingScore > 60 || $suspiciousRate > 30) return 'High';
        if ($avgCheatingScore > 40 || $suspiciousRate > 15) return 'Medium';
        return 'Low';
    }

    private function calculateCourseRiskLevel($suspiciousRate, $avgCheatingScore)
    {
        if ($suspiciousRate > 40 || $avgCheatingScore > 75) return 'High Risk';
        if ($suspiciousRate > 20 || $avgCheatingScore > 60) return 'Medium Risk';
        if ($suspiciousRate > 10 || $avgCheatingScore > 45) return 'Low Risk';
        return 'Secure';
    }
}
